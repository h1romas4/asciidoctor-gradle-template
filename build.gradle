buildscript {
    configurations.classpath {
        resolutionStrategy.dependencySubstitution {
            // https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/679#issuecomment-2371010585
            // fix dependencies (Could not find io.github.rburgst:okhttp-digest:1.10)
            substitute module('com.burgstaller:okhttp-digest') using module('io.github.rburgst:okhttp-digest:1.21')
        }
    }
}

plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.asciidoctor.jvm.pdf' version '3.3.2'
    id 'org.asciidoctor.jvm.gems' version '3.3.2'
}

repositories {
    mavenCentral()
    ruby.gems()
}

dependencies {
    asciidoctorGems files('gradle/repos/gem/prawn_svg_font_patch-0.2.0.gem')
    // only asciidoctor-pdf 1.5.3 - 1.6.2
    asciidoctorGems files('gradle/repos/gem/asciidoctor-nabetani-0.1.4-ruby25-patched.gem')
    // for another asciidoctor-pdf version
    // asciidoctorGems 'rubygems:asciidoctor-pdf-linewrap-ja:0.7.1'
}

asciidoctor {
    dependsOn asciidoctorGemsPrepare
    baseDir file('src/docs/asciidoc')
    sources {
        include 'index.adoc'
    }
    resources {
        from('src/docs/asciidoc') {
            include 'Chapter*/images/*'
        }
    }
    asciidoctorj {
        attributes 'stylesdir': '@style',
            'stylesheet': 'asciidoctor.css'
    }
}

asciidoctorPdf {
    dependsOn asciidoctorGemsPrepare
    baseDir file('src/docs/asciidoc')
    fontsDir file('src/docs/asciidoc/@font')
    sources {
        include 'index.adoc'
    }
    asciidoctorj {
        attributes 'pdf-themesdir': "@style",
            'pdf-theme': 'pdf-theme.yml'
            // When using the asciidoctor-pdf standard ward-wrap
            //, 'scripts': 'cjk'
    }
}

asciidoctorj {
    // not working v2.5.10 Upgrade to JRuby 9.4.2.0
    version = '2.5.9'
    modules {
        diagram.use()
        diagram.version '2.3.1'
        // If asciidoctor-nabetani is used,
        // asciidoctor-pdf must be specified as 1.5.3 - 1.6.2.
        pdf.version '1.6.2'
    }
    requires = [
        'asciidoctor-diagram',
        'prawn_svg_font_patch',
        // only asciidoctor-pdf 1.5.3 - 1.6.2
        'asciidoctor/nabetani',
        // for another asciidoctor-pdf version
        // 'asciidoctor-pdf-linewrap-ja',
    ]
    attributes 'source-highlighter': 'rouge'
}

/**
 * docs/ 配下のファイル及びディレクトリを全て削除するタスク
 */
tasks.register('cleanDocs', Delete) {
    group 'documentation'
    description 'Task to delete all files and directories under docs/'
    // docs/ ディレクトリは残しその配下のファイルとディレクトリを全て削除
    delete file('docs/').listFiles()
}

/**
 * Asciidoc 文章とファイルシステムの画像の整合性を確認するユーティリティタスク
 *
 * src/docs/asciidoc 内の未使用画像と .adoc からのリンク切れ画像の一覧を出力する。
 * 処理は一覧の表示のみで未使用画像ファイルの削除は行わない。
 * また .adoc からのリンク切れもエラー終了しない。
 * ./gradlew -q checkSyncImage
 *
 * @see buildSrc/src/main/groovy/SyncImageTask.groovy
 */
tasks.register('checkSyncImage', SyncImageTask) {
    group 'documentation'
    description 'Utility to check the consistency of Asciidoc text and file system images'
    // 起点の文書ディレクトリ
    baseDir = file('src/docs/asciidoc')
    // 起点の Asciidoc 文書（include を辿る）
    index = 'index.adoc'
    // ファイルシステム上で画像として認識する拡張子
    // 文書内で image:: として使われているファイル全ての拡張子を設定すること
    imageExt = ['png', 'jpg', 'jpeg', 'svg']
}

/**
 * PDF 文書のメタデータを確認するユーティリティタスク
 *
 * ./gradlew -q checkPdfInfo
 *
 * @see buildSrc/src/main/groovy/PdfInfoTask.groovy
 */
tasks.register('checkPdfInfo', PdfInfoTask) {
    group 'documentation'
    description 'Utility task to check PDF document metadata'
    // 確認する PDF 文書
    pdfFile = file('docs/index.pdf')
}

/**
 * Asciidoc 文書から HTML/PDF 文書を生成し配布可能な状態で docs 配下に出力するタスク
 *
 * ./gradlew docs
 */
tasks.register('docs', Copy) {
    dependsOn(asciidoctor, asciidoctorPdf, cleanDocs)
    group 'documentation'
    description 'Generate HTML/PDF documents from Asciidoc documents and output them under docs/'
    // build に生成された PDF/HML 文書を docs にコピー
    from 'build/docs/asciidoc/index.html'
    from 'build/docs/asciidocPdf/index.pdf'
    // HTML 文書用に build に出力されたダイアログ生成画像、表紙裏表紙カバー PDF を含む
    // 各 images 配下の全ての画像リソースを docs にコピー
    from('build/docs/asciidoc/') {
        include 'Chapter*/images/*'
    }
    into 'docs/'
}
