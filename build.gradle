plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.asciidoctor.jvm.pdf' version '3.3.2'
    id 'org.asciidoctor.jvm.gems' version '3.3.2'
}

repositories {
    mavenCentral()
    ruby.gems()
}

dependencies {
    asciidoctorGems files('gradle/repos/gem/prawn_svg_font_patch-0.1.0.gem')
    // only asciidoctor-pdf 1.5.3 - 1.6.2
    asciidoctorGems files('gradle/repos/gem/asciidoctor-nabetani-0.1.4-ruby25-patched.gem')
    // for another asciidoctor-pdf version
    // asciidoctorGems 'rubygems:asciidoctor-pdf-linewrap-ja:0.7.1'
}

asciidoctor {
    dependsOn asciidoctorGemsPrepare
    baseDir file('src/docs/asciidoc')
    sources {
        include 'index.adoc'
    }
    resources {
        from('src/docs/asciidoc') {
            include 'Chapter*/images/*'
        }
    }
    asciidoctorj {
        attributes 'stylesdir': '@style',
            'stylesheet': 'asciidoctor.css'
    }
}

asciidoctorPdf {
    dependsOn asciidoctorGemsPrepare
    baseDir file('src/docs/asciidoc')
    fontsDir file('src/docs/asciidoc/@font')
    sources {
        include 'index.adoc'
    }
    asciidoctorj {
        attributes 'pdf-themesdir': "@style",
            'pdf-theme': 'pdf-theme.yml'
            // When using the asciidoctor-pdf standard ward-wrap
            //, 'scripts': 'cjk'
    }
}

asciidoctorj {
    version = '2.5.6'
    modules {
        diagram.use()
        diagram.version '2.2.8'
        // If asciidoctor-nabetani is used,
        // asciidoctor-pdf must be specified as 1.5.3 - 1.6.2.
        pdf.version '1.6.2'
    }
    requires = [
        'asciidoctor-diagram',
        'prawn_svg_font_patch',
        // only asciidoctor-pdf 1.5.3 - 1.6.2
        'asciidoctor/nabetani',
        // for another asciidoctor-pdf version
        // 'asciidoctor-pdf-linewrap-ja',
    ]
    attributes 'source-highlighter': 'rouge'
}

task cleanDocs(type: Delete) {
    // Delete all files in the docs directory once
    delete fileTree('docs/') {
        include '**/*'
    }
}

task docs(dependsOn: [asciidoctor, asciidoctorPdf, cleanDocs]) doLast {
    // Copy documents created by asciidoctor to the docs directory
    copy {
        from 'build/docs/asciidoc/index.html'
        from 'build/docs/asciidocPdf/index.pdf'
        into 'docs/'
    }
    // Copy images generated by asciidoctor-diagram to docs directory for index.html
    copy {
        from 'build/docs/asciidoc/'
        include 'Chapter*/images/*'
        into 'docs'
    }
    // Copy images created by the user to the docs directory for index.html
    copy {
        from 'src/docs/asciidoc/'
        include 'Chapter*/images/*'
        into 'docs'
    }
}
